### Directory Tree Structure ###
./
    run.py
    .DS_Store
    config.py
    requirements.txt
    README.md
    .gitignore
    gpt.py
    app/
        .DS_Store
        align.py
        models.py
        __init__.py
        bedrock.py
        routes.py
        static/
            .DS_Store
            styles.css
            logo.png
            uploads/
                ImageID-69532634_4_aligned_crop_12_1729516200.jpg
                ImageID-69504832_5_aligned.jpg
                ImageID-69507921_13_aligned_crop_12_1729515891.jpg
                ImageID-69556840_2.jpg
                ImageID-69518801_2_aligned_crop_12_1729516859.jpg
                ImageID-69539780_1_1_15.jpg
                ImageID-69507921_4_aligned.jpg
                ImageID-69567194_3_aligned.jpg
                ImageID-70014907.jpg
                ImageID-69507921_9.jpg
                ImageID-69525587_11.jpg
                ImageID-69525587_10.jpg
                ImageID-69507921_8.jpg
                ImageID-69539780_1_1_14.jpg
                ImageID-70014721.jpg
                ImageID-69507921_13_aligned_crop_12_1729517275.jpg
                ImageID-69539780_1_1_15_aligned.jpg
                ImageID-69992311.jpg
                ImageID-69556840_3.jpg
                ImageID-69527447.jpg
                ImageID-69561292_7_aligned_crop_12_1729517076.jpg
                ImageID-69561292_7_aligned_crop_12_1729517276.jpg
                ImageID-69556840_1.jpg
                ImageID-69528139_6_aligned_crop_12_1729516204.jpg
                ImageID-69528139_6_aligned.jpg
                ImageID-69539780_1_1_16.jpg
                ImageID-69572922_1_aligned_crop_12_1729515889.jpg
                ImageID-69526808.jpg
                ImageID-69525385_8.jpg
                ImageID-69507921_13_aligned_crop_12_1729516593.jpg
                ImageID-69541897_8.jpg
                ImageID-69611658_aligned.jpg
                ImageID-69526808_2_aligned.jpg
                ImageID-69578836_aligned.jpg
                ImageID-69507780_3_aligned.jpg
                ImageID-69507921_13_aligned_crop_12_1729517074.jpg
                ImageID-69507780.jpg
                ImageID-69561292_7_aligned_crop_12_1729515892.jpg
                ImageID-69539780_1_1_8.jpg
                ImageID-69696964.jpg
                ImageID-69556840_4.jpg
                ImageID-69527447_2_aligned.jpg
                ImageID-69528139_3_aligned.jpg
                ImageID-69539780_1_1_13.jpg
                ImageID-69534286_9.jpg
                .DS_Store
                ImageID-69572922_1_aligned.jpg
                ImageID-69541897.jpg
                ImageID-69507921_10_aligned_crop_12_1729516562.jpg
                ImageID-69534286_8.jpg
                ImageID-69539780_1_1_12.jpg
                ImageID-69528139_6_aligned_crop_12_1729516566.jpg
                ImageID-69507921_10_aligned_crop_12_1729516589.jpg
                ImageID-69507921_10_aligned.jpg
                ImageID-69556840_5.jpg
                ImageID-69539780_1_1_9.jpg
                ImageID-69507921_10_aligned_crop_12_1729516199.jpg
                ImageID-69539780_aligned.jpg
                ImageID-69525587_3_aligned.jpg
                ImageID-69556840_7.jpg
                ImageID-69525587_8_aligned_crop_1_1729522038.jpg
                ImageID-69616854_9.jpg
                ImageID-70014651.jpg
                ImageID-69572922_1_aligned_crop_12_1729516202.jpg
                ImageID-69572922_1_aligned_crop_12_1729516564.jpg
                ImageID-69539780_1_1_10.jpg
                ImageID-69556840_8_aligned_crop_12_1729516858.jpg
                ImageID-69561292_6_aligned_crop_12_1729516858.jpg
                ImageID-69561292_7_aligned_crop_12_1729516594.jpg
                ImageID-69525385_aligned.jpg
                ImageID-69640765_1.jpg
                ImageID-69525385_7_aligned.jpg
                ImageID-69539780_1_1_11.jpg
                ImageID-69572922_1.jpg
                ImageID-69525587_11_aligned.jpg
                ImageID-69616854_8.jpg
                ImageID-69556840_6.jpg
                ImageID-69532634_4_aligned_crop_12_1729516562.jpg
                ImageID-69518801_2_aligned_crop_12_1729517073.jpg
                ImageID-69507921_10_aligned_crop_12_1729516857.jpg
                ImageID-69539780_1.jpg
                ImageID-69561292_5.jpg
                ImageID-69507921_13_aligned_crop_12_1729516860.jpg
                ImageID-69556840_8_aligned_crop_12_1729516590.jpg
                ImageID-69616854_13.jpg
                ImageID-70014549_1.jpg
                ImageID-69633161_aligned.jpg
                ImageID-69561292_6_aligned_crop_12_1729516591.jpg
                ImageID-69546267_2.jpg
                ImageID-69506170.jpg
                ImageID-69532634_4_aligned_crop_12_1729516673.jpg
                template_8.jpg
                input_7.jpg
                ImageID-69525587_7.jpg
                ImageID-69541897_aligned.jpg
                ImageID-69572597_5.jpg
                ImageID-69525385.jpg
                ImageID-69572922_1_aligned_crop_12_1729516675.jpg
                ImageID-70014651_1.jpg
                ImageID-70101246_aligned.jpg
                ImageID-69515661_aligned.jpg
                ImageID-69507780_1.jpg
                ImageID-69528139.jpg
                ImageID-69572597_2_aligned.jpg
                ImageID-69572597_4.jpg
                ImageID-69525587_6.jpg
                ImageID-69640765.jpg
                input_6.jpg
                ImageID-69504832_3_aligned.jpg
                template_9.jpg
                ImageID-69506170_1.jpg
                ImageID-69546267_3.jpg
                ImageID-69616854_12.jpg
                ImageID-69518801_1.jpg
                ImageID-69561292_4.jpg
                ImageID-69995179.jpg
                ImageID-69539780_2.jpg
                ImageID-69528139_6_aligned_crop_12_1729516677.jpg
                ImageID-69561292_6.jpg
                ImageID-69507921_13_aligned.jpg
                ImageID-69507921_10_aligned_crop_12_1729516673.jpg
                ImageID-69616854_10.jpg
                ImageID-69532634_4_aligned_crop_12_1729517340.jpg
                ImageID-69546267_1.jpg
                ImageID-69518801_2_aligned.jpg
                ImageID-69561292_7_aligned_crop_12_1729516862.jpg
                ImageID-69561292_7_aligned.jpg
                input_4.jpg
                ImageID-69525587_4.jpg
                ImageID-69532634_4_aligned_crop_12_1729516857.jpg
                ImageID-69507780_3.jpg
                ImageID-70014651_2.jpg
                ImageID-69507780_2.jpg
                ImageID-70081023_1.jpg
                ImageID-69525587_5.jpg
                input_5.jpg
                ImageID-69696964_aligned.jpg
                ImageID-69616854_11.jpg
                ImageID-69561292_7_aligned_crop_12_1729516678.jpg
                ImageID-69518801_2_aligned_crop_12_1729517273.jpg
                ImageID-69518801_2.jpg
                ImageID-69525587_9_aligned.jpg
                ImageID-69561292_7.jpg
                ImageID-69561292_3.jpg
                ImageID-70032310_1.jpg
                ImageID-69546267_4.jpg
                ImageID-69633161.jpg
                ImageID-69504832.jpg
                input_1.jpg
                ImageID-69525587_1.jpg
                ImageID-69572597_3.jpg
                input_10.jpg
                ImageID-69561292_6_aligned_crop_12_1729517272.jpg
                ImageID-69526808_1_aligned.jpg
                ImageID-69518801_2_aligned_crop_12_1729516592.jpg
                ImageID-69556840_8_aligned_crop_12_1729517272.jpg
                ImageID-69528139_5_aligned.jpg
                ImageID-69528139_6_aligned_crop_12_1729517343.jpg
                ImageID-69572597_2.jpg
                ImageID-69499858_2.jpg
                ImageID-69995179_1.jpg
                ImageID-69499858.jpg
                ImageID-69567194_1.jpg
                ImageID-69616854_14.jpg
                ImageID-69561292_2.jpg
                ImageID-69532634_5_aligned.jpg
                ImageID-69611658.jpg
                ImageID-69499858_1_aligned.jpg
                ImageID-69539780_1_1_16_aligned.jpg
                ImageID-69572922_1_aligned_crop_12_1729517341.jpg
                ImageID-69567194_3.jpg
                input_10_aligned.jpg
                input_2.jpg
                ImageID-69525587_2.jpg
                ImageID-69646304.jpg
                ImageID-69556840_8_aligned_crop_12_1729517072.jpg
                ImageID-70014544.jpg
                ImageID-69572597.jpg
                ImageID-69539780.jpg
                ImageID-69616854_5_aligned.jpg
                ImageID-69572597_1.jpg
                ImageID-69518801_aligned.jpg
                ImageID-70625919.jpg
                ImageID-69499858_1.jpg
                ImageID-69525587_3.jpg
                ImageID-69561292_6_aligned_crop_12_1729517072.jpg
                input_3.jpg
                ImageID-69567194_2.jpg
                ImageID-69519600_5_aligned.jpg
                ImageID-69561292_1.jpg
                ImageID-69534286_4_aligned.jpg
                ImageID-69525587.jpg
                12.pkl
                ImageID-69518801_2_aligned_crop_12_1729515890.jpg
                ImageID-69519600_2.jpg
                ImageID-69539780_1_1_11_aligned.jpg
                ImageID-69561292_6_aligned_crop_12_1729516201.jpg
                template_1.jpg
                ImageID-69504832_3.jpg
                ImageID-70081023.jpg
                template_10.jpg
                ImageID-69525587_10_aligned.jpg
                ImageID-69532634_3.jpg
                ImageID-69546267_3_aligned.jpg
                ImageID-69532634_2.jpg
                template_11.jpg
                ImageID-70014549.jpg
                ImageID-69504832_2.jpg
                ImageID-69532634_5_aligned_crop_1_1729522040.jpg
                ImageID-69507921_13_aligned_crop_12_1729517343.jpg
                ImageID-70032773.jpg
                ImageID-69519600_aligned.jpg
                ImageID-69556840_8_aligned_crop_12_1729516201.jpg
                ImageID-69525385_7_aligned_crop_1_1729522037.jpg
                ImageID-69519600_3.jpg
                ImageID-69567194_aligned.jpg
                ImageID-69519600_1.jpg
                template_2.jpg
                template_13.jpg
                ImageID-69572922_1_aligned_crop_12_1729516859.jpg
                ImageID-69507921_11_aligned.jpg
                ImageID-69567194.jpg
                ImageID-69532634_1.jpg
                ImageID-69527447_3_aligned.jpg
                template_12.jpg
                ImageID-69504832_1.jpg
                template_3.jpg
                ImageID-69515661.jpg
                ImageID-69567194_3_aligned_crop_1_1729522039.jpg
                ImageID-69519600_4.jpg
                ImageID-69616854.jpg
                template_7.jpg
                ImageID-69525587_8.jpg
                input_8.jpg
                ImageID-69507921_10.jpg
                ImageID-69539780_2_aligned.jpg
                ImageID-69507780_2_aligned.jpg
                ImageID-69518801_2_aligned_crop_12_1729516202.jpg
                ImageID-69518801_2_aligned_crop_12_1729516564.jpg
                ImageID-69504832_5.jpg
                ImageID-69532634_5.jpg
                ImageID-69561292.jpg
                ImageID-69534286.jpg
                ImageID-69532634_4.jpg
                ImageID-69532634.jpg
                ImageID-69504832_4.jpg
                ImageID-69507921_11.jpg
                ImageID-69561292_7_aligned_crop_12_1729517344.jpg
                input_9.jpg
                ImageID-69525587_9.jpg
                template_6.jpg
                ImageID-69528139_6_aligned_crop_12_1729516861.jpg
                ImageID-69539780_1_1_8_aligned.jpg
                ImageID-69519600_5.jpg
                ImageID-69519600_7.jpg
                ImageID-69507921.jpg
                ImageID-69518801.jpg
                ImageID-71031962.jpg
                ImageID-69556840_8_aligned_crop_12_1729516563.jpg
                ImageID-69507921_13_aligned_crop_12_1729516677.jpg
                ImageID-69561292_6_aligned_crop_12_1729515889.jpg
                template_4.jpg
                ImageID-69507921_13.jpg
                ImageID-69556840_8_aligned_crop_12_1729515888.jpg
                ImageID-69525587_10_aligned_crop_1_1729522041.jpg
                template_15.jpg
                template_14.jpg
                ImageID-69507780_aligned.jpg
                ImageID-70032773_1.jpg
                ImageID-69504832_4_aligned.jpg
                ImageID-69507921_12.jpg
                ImageID-69574312.jpg
                template_5.jpg
                ImageID-69525587_7_aligned.jpg
                ImageID-69561292_6_aligned_crop_12_1729516563.jpg
                ImageID-69507921_5_aligned.jpg
                ImageID-69519600_6.jpg
                ImageID-69539780_1_1_7.jpg
                ImageID-69578836.jpg
                ImageID-69504832_5_aligned_crop_1_1729522037.jpg
                ImageID-69532634_4_aligned_crop_12_1729516590.jpg
                ImageID-69539780_1_2.jpg
                ImageID-69525587_4_aligned.jpg
                ImageID-69528139_5.jpg
                ImageID-69616854_5.jpg
                ImageID-69567194_1_aligned.jpg
                ImageID-69507921_10_aligned_crop_12_1729515887.jpg
                ImageID-69534286_9_aligned_crop_1_1729522039.jpg
                input.jpg
                ImageID-69534286_6.jpg
                ImageID-69519600.jpg
                ImageID-69526808_2.jpg
                ImageID-69541897_3.jpg
                ImageID-69525385_2.jpg
                ImageID-69525385_3.jpg
                ImageID-69507921_13_aligned_crop_12_1729516566.jpg
                ImageID-70096298.jpg
                ImageID-69572922_1_aligned_crop_12_1729517273.jpg
                ImageID-69541897_2.jpg
                ImageID-69561292_7_aligned_crop_12_1729516567.jpg
                ImageID-69526808_3.jpg
                ImageID-69572922.jpg
                ImageID-69507921_1.jpg
                ImageID-69534286_7.jpg
                ImageID-69528139_4.jpg
                ImageID-69616854_4.jpg
                ImageID-69527447_6.jpg
                ImageID-69525587_9_aligned_crop_1_1729522040.jpg
                ImageID-69611658_1_aligned.jpg
                ImageID-69539780_1_1_6.jpg
                ImageID-69539780_1_1_4.jpg
                ImageID-69561292_6_aligned_crop_12_1729517341.jpg
                ImageID-69539780_1_1.jpg
                ImageID-69556840_8_aligned_crop_12_1729517340.jpg
                ImageID-69527447_4.jpg
                ImageID-69556840_8.jpg
                ImageID-69616854_6.jpg
                ImageID-69528139_6.jpg
                ImageID-69528139_4_aligned.jpg
                template.jpg
                ImageID-69546267.jpg
                ImageID-69532634_4_aligned.jpg
                ImageID-69572922_1_aligned_crop_12_1729517073.jpg
                ImageID-69534286_5.jpg
                ImageID-69507921_3.jpg
                ImageID-69528139_6_aligned_crop_12_1729516594.jpg
                ImageID-69526808_1.jpg
                ImageID-69532634_4_aligned_crop_12_1729515887.jpg
                ImageID-69525385_1.jpg
                ImageID-69507921_13_aligned_crop_12_1729516203.jpg
                ImageID-69541897_1.jpg
                ImageID-69534286_4.jpg
                ImageID-69507921_2.jpg
                ImageID-69556840.jpg
                ImageID-69507780_1_aligned.jpg
                ImageID-69539780_1_aligned.jpg
                ImageID-69499858_aligned.jpg
                ImageID-69518801_2_aligned_crop_12_1729516675.jpg
                ImageID-70101246.jpg
                ImageID-69616854_7.jpg
                ImageID-70590958.jpg
                ImageID-69527447_5.jpg
                ImageID-69539780_1_1_5.jpg
                ImageID-69556840_8_aligned.jpg
                ImageID-69539780_1_1_1.jpg
                ImageID-69983010.jpg
                ImageID-69527447_1.jpg
                ImageID-69507921_10_aligned_crop_12_1729517270.jpg
                ImageID-69534286_9_aligned.jpg
                ImageID-69528139_3.jpg
                ImageID-69616854_3.jpg
                ImageID-69528139_6_aligned_crop_12_1729515891.jpg
                ImageID-69572922_1_aligned_crop_12_1729516591.jpg
                ImageID-69527447_aligned.jpg
                ImageID-69525587_8_aligned.jpg
                ImageID-69507921_6.jpg
                ImageID-69528139_1_aligned.jpg
                ImageID-69541897_5.jpg
                ImageID-69532634_4_aligned_crop_12_1729517071.jpg
                ImageID-69572597_aligned.jpg
                ImageID-69526808_4.jpg
                ImageID-69561292_6_aligned_crop_12_1729516674.jpg
                ImageID-69525385_4.jpg
                ImageID-69507921_10_aligned_crop_12_1729517339.jpg
                ImageID-69515661_1.jpg
                ImageID-69556840_8_aligned_crop_12_1729516674.jpg
                ImageID-69525385_5.jpg
                ImageID-69526808_5.jpg
                ImageID-69541897_4.jpg
                ImageID-70014544_1.jpg
                ImageID-69507921_7.jpg
                ImageID-69534286_1.jpg
                ImageID-69507921_12_aligned.jpg
                ImageID-69611658_1.jpg
                ImageID-69528139_2.jpg
                ImageID-69616854_2.jpg
                ImageID-69528139_6_aligned_crop_12_1729517275.jpg
                ImageID-69561292_6_aligned.jpg
                1.pkl
                ImageID-69539780_1_1_2.jpg
                ImageID-69527447_2.jpg
                ImageID-70032310.jpg
                ImageID-69528139_6_aligned_crop_12_1729517075.jpg
                ImageID-69507921_3_aligned.jpg
                ImageID-69518801_2_aligned_crop_12_1729517342.jpg
                ImageID-69534286_3.jpg
                ImageID-69507921_5.jpg
                ImageID-69541897_6.jpg
                ImageID-69525587_1_aligned.jpg
                ImageID-69526808_7.jpg
                ImageID-69525385_7.jpg
                ImageID-69515661_3.jpg
                ImageID-69515661_2.jpg
                ImageID-69525385_6.jpg
                ImageID-69526808_6.jpg
                ImageID-69561292_7_aligned_crop_12_1729516204.jpg
                ImageID-69541897_7.jpg
                ImageID-69525587_11_aligned_crop_1_1729522042.jpg
                ImageID-69534286_2.jpg
                ImageID-69507921_4.jpg
                ImageID-69532634_4_aligned_crop_12_1729517271.jpg
                ImageID-69525385_5_aligned.jpg
                ImageID-69507921_10_aligned_crop_12_1729517070.jpg
                ImageID-69616854_1.jpg
                ImageID-69528139_1.jpg
                ImageID-69527447_3.jpg
                ImageID-69539780_1_1_3.jpg
        templates/
            base.html
            inspect.html
            model_list.html
            model_detail.html
            model_review_images.html
            model_good_images.html
            run_list.html
            model_create.html
            inspection_result.html
            model_template_image.html
            model_regions.html
            run_detail.html

### Concatenated Files Content ###

##################################
### File: run.py
##################################
from app import create_app

app = create_app()

# Add `getattr` to Jinja2 globals
app.jinja_env.globals.update(getattr=getattr)

if __name__ == '__main__':
    app.run(debug=True)


##################################
### File: config.py
##################################
import os

class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'mysecretkey'
    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or 'mysql+pymysql://root:supersecretpassword@localhost:3306/inspection'
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    UPLOADED_IMAGES_DEST = os.path.join(os.getcwd(), 'app', 'static', 'uploads')
    S3_BUCKET = os.environ.get('S3_BUCKET')


##################################
### File: requirements.txt
##################################
Flask==1.1.4
Werkzeug==1.0.1
Flask-SQLAlchemy==2.4.4
SQLAlchemy==1.3.18
Flask-Migrate==2.5.3
Flask-Uploads==0.2.1
Flask-Bootstrap==3.3.7.1
boto3
pymysql
MarkupSafe==2.0.1

##################################
### File: README.md
##################################
# Flask Inspection Model App

This Flask app is designed to create, manage, and run inspection models. The application includes multi-step processes for uploading images, selecting regions on a template image, and testing inspection models using images from an S3 bucket.

## Features

- **Multi-step Model Creation:**
  - Upload a template image
  - Upload 5 good images
  - Draw regions on the template image
  - Upload 5 bad images for each region
- **Run Inspections:** Run models on S3 images and get pass/fail results.
- **Model Status Tracking:** Track model statuses as `setup`, `ready`, or `running`.
- **Mocked Inspection Logic:** The app includes a placeholder inspection logic that returns "pass" for every image.

## Installation

### Requirements

- Python 3.8+
- MySQL or another SQLAlchemy-supported database
- AWS S3 (for actual image handling, though it's mocked in this app)

### Setup Instructions

1. **Clone the Repository:**
    ```bash
    git clone <repository_url>
    cd inspection_model_app
    ```

2. **Install Dependencies:**
    ```bash
    pip install -r requirements.txt
    ```

3. **Configure MySQL Database:**
   - Create a MySQL database (e.g., `inspection_model_db`):
     ```sql
     CREATE DATABASE inspection_model_db;
     ```
   - Update the `config.py` file with your MySQL database credentials:
     ```python
     SQLALCHEMY_DATABASE_URI = 'mysql://username:password@localhost/inspection_model_db'
     ```

4. **Initialize and Migrate Database:**
    ```bash
    flask db init
    flask db migrate -m "Initial migration"
    flask db upgrade
    ```

5. **Run the Application:**
    ```bash
    flask run
    ```

6. **Access the App:**
   Open your browser and visit: [http://127.0.0.1:5000](http://127.0.0.1:5000)

## How to Use

### Creating a Model

1. **Create a new model:**
   - Go to the "Models" page and click "Create New Model."
   - Enter the model name and description.
   
2. **Upload Template Image:**
   - After creating the model, upload a template image.
   - A preview of the image will be displayed.

3. **Upload Good Images:**
   - Upload 5 good images, each with a preview.
   
4. **Draw Regions:**
   - Click on the template image to select regions for inspection.
   - For each region, upload 5 bad images.

5. **Finish Regions:**
   - Once the regions and bad images are uploaded, click "Finish Regions" to mark the model as `ready`.

### Running a Model

1. **Run the Model:**
   - If the model is `ready`, click "Run" to run it on S3 images (mocked in this app).
   - The inspection results (pass/fail) will be displayed.

### Model Status

- **Setup:** The model is still in the setup process.
- **Ready:** The model is ready to be run on images.
- **Running:** The model is currently being run on images.

## Mocked Inspection

The `run_inspection` function is currently mocked to return "pass" for every image. You can modify this function in `routes.py` to implement your own inspection logic.

## Additional Notes

- **MySQL Configuration:** You can use other databases supported by SQLAlchemy by updating the `SQLALCHEMY_DATABASE_URI` in `config.py`.



##################################
### File: .gitignore
##################################
.DS_Store
uploads/*
app/static/uploads/*

##################################
### File: gpt.py
##################################
import os

def concatenate_files_in_directory(directory_path):
    giant_string = ""

    # Traverse the directory and its subdirectories
    for root, dirs, files in os.walk(directory_path):
        # Skip directories that start with a dot (.)
        if any(part.startswith('.') for part in root.split(os.sep)):
            print(f"Skipping directory: {root}")
            continue

        for file_name in files:
            # Skip image files
            if file_name.lower().endswith(('.jpg', '.jpeg', '.png', '.gif', '.bmp', '.tiff')):
                print(f"Skipping image file: {file_name}")
                continue

            file_path = os.path.join(root, file_name)
            # Prepend the directory structure to the file name in the string
            relative_path = os.path.relpath(file_path, directory_path)
            print(f"Processing file: {relative_path}")
            giant_string += f"File: {relative_path}\n"
            try:
                # Append file contents to the giant string
                with open(file_path, 'r', encoding='utf-8') as file:
                    contents = file.read()
                    giant_string += contents + "\n\n"  # Add an extra newline for separation
            except Exception as e:
                # Handle exceptions for reading files
                print(f"Could not read file {file_path}: {e}")
    return giant_string

# Replace with the path of your directory
directory_path = "."

# Delete code.txt if it exists
output_file_path = "code.txt"
if os.path.exists(output_file_path):
    os.remove(output_file_path)
    print(f"{output_file_path} deleted.")

# Get the concatenated result string
result_string = concatenate_files_in_directory(directory_path)

# Save the result to a file named "code.txt"
if result_string.strip():  # Check if the string is not empty
    with open(output_file_path, "w", encoding="utf-8") as output_file:
        output_file.write(result_string)
    print("Giant string saved to code.txt")
else:
    print("No files were processed, code.txt was not written.")



##################################
### File: app/align.py
##################################
import os
import cv2
import numpy as np
import time


def align_and_crop_regions(input_image_path, model):
    """
    Align the input image with the template image from the model, check the alignment
    by cropping regions, and return the aligned image. The aligned image is saved, but
    the cropped regions are only processed in memory and not saved.
    """
    # Get the local template image path
    template_path = model.get_template_image_path()

    if not template_path:
        raise ValueError("Template image path not found in the model.")

    template = cv2.imread(template_path)
    input_image = cv2.imread(input_image_path)

    if template is None or input_image is None:
        raise ValueError("Either template or input image could not be loaded.")

    # Convert images to grayscale
    gray_template = cv2.cvtColor(template, cv2.COLOR_BGR2GRAY)
    gray_input = cv2.cvtColor(input_image, cv2.COLOR_BGR2GRAY)

    # Detect SIFT keypoints and descriptors
    sift = cv2.SIFT_create(nfeatures=50000)
    keypoints_template, descriptors_template = sift.detectAndCompute(gray_template, None)
    keypoints_input, descriptors_input = sift.detectAndCompute(gray_input, None)

    # Use FLANN based matcher
    FLANN_INDEX_KDTREE = 1
    index_params = dict(algorithm=FLANN_INDEX_KDTREE, trees=5)
    search_params = dict(checks=500)
    flann = cv2.FlannBasedMatcher(index_params, search_params)
    matches = flann.knnMatch(descriptors_template, descriptors_input, k=2)

    # Apply Lowe's ratio test
    good_matches = [m for m, n in matches if m.distance < 0.7 * n.distance]

    if len(good_matches) > 10:
        # Extract matched points
        src_pts = np.float32([keypoints_template[m.queryIdx].pt for m in good_matches]).reshape(-1, 1, 2)
        dst_pts = np.float32([keypoints_input[m.trainIdx].pt for m in good_matches]).reshape(-1, 1, 2)

        # Compute homography
        H, mask = cv2.findHomography(dst_pts, src_pts, cv2.RANSAC, 5.0)

        # Align the input image
        height, width, channels = template.shape
        aligned_image = cv2.warpPerspective(input_image, H, (width, height))

        # Process the regions (only in-memory, no saving)
        max_vals = []
        for region in model.regions:
            x1, y1, x2, y2 = region.x1, region.y1, region.x2, region.y2

            # Ensure coordinates are ordered correctly
            x1, x2 = min(x1, x2), max(x1, x2)
            y1, y2 = min(y1, y2), max(y1, y2)

            aligned_crop = aligned_image[y1:y2, x1:x2]
            template_crop = template[y1:y2, x1:x2]

            # Check if aligned_crop is valid
            if aligned_crop is None or aligned_crop.size == 0:
                raise ValueError(f"Failed to load or process image: {input_image_path}")

            # Convert to grayscale for matching
            aligned_crop_gray = cv2.cvtColor(aligned_crop, cv2.COLOR_BGR2GRAY)
            template_crop_gray = cv2.cvtColor(template_crop, cv2.COLOR_BGR2GRAY)

            # Perform template matching
            match_result = cv2.matchTemplate(aligned_crop_gray, template_crop_gray, cv2.TM_CCOEFF_NORMED)
            _, max_val, _, _ = cv2.minMaxLoc(match_result)
            max_vals.append(max_val)

        # Check if alignment was successful based on match scores
        print(input_image_path, max_vals)
        if max(max_vals) > 0:
            return None  # Alignment failed
        else:
            # Save the aligned image
            aligned_image_name = os.path.splitext(os.path.basename(input_image_path))[0] + '_aligned.jpg'
            aligned_image_path = os.path.join('app/static/uploads', aligned_image_name)
            cv2.imwrite(aligned_image_path, aligned_image)

            return aligned_image_path
    return None


def crop_regions(input_image_path, model, region):
    """
    Align the input image with the template image from the model, crop the region, save the cropped region,
    and return the path of the cropped region image with a unique timestamp to avoid overwriting.
    """
    # Get the local template image path
    template_path = model.get_template_image_path()

    if not template_path:
        raise ValueError("Template image path not found in the model.")

    template = cv2.imread(template_path)
    input_image = cv2.imread(input_image_path)

    if template is None or input_image is None:
        raise ValueError("Either template or input image could not be loaded.")

    # Convert images to grayscale
    gray_template = cv2.cvtColor(template, cv2.COLOR_BGR2GRAY)
    gray_input = cv2.cvtColor(input_image, cv2.COLOR_BGR2GRAY)

    # Detect SIFT keypoints and descriptors
    sift = cv2.SIFT_create(nfeatures=50000)
    keypoints_template, descriptors_template = sift.detectAndCompute(gray_template, None)
    keypoints_input, descriptors_input = sift.detectAndCompute(gray_input, None)

    # Use FLANN based matcher
    FLANN_INDEX_KDTREE = 1
    index_params = dict(algorithm=FLANN_INDEX_KDTREE, trees=5)
    search_params = dict(checks=500)
    flann = cv2.FlannBasedMatcher(index_params, search_params)
    matches = flann.knnMatch(descriptors_template, descriptors_input, k=2)

    # Apply Lowe's ratio test
    good_matches = [m for m, n in matches if m.distance < 0.7 * n.distance]

    if len(good_matches) > 10:
        # Extract matched points
        src_pts = np.float32([keypoints_template[m.queryIdx].pt for m in good_matches]).reshape(-1, 1, 2)
        dst_pts = np.float32([keypoints_input[m.trainIdx].pt for m in good_matches]).reshape(-1, 1, 2)

        # Compute homography
        H, mask = cv2.findHomography(dst_pts, src_pts, cv2.RANSAC, 5.0)

        # Align the input image
        height, width, channels = template.shape
        aligned_image = cv2.warpPerspective(input_image, H, (width, height))

        # Ensure coordinates are ordered correctly for the region
        x1, x2 = min(region.x1, region.x2), max(region.x1, region.x2)
        y1, y2 = min(region.y1, region.y2), max(region.y1, region.y2)

        # Crop the region from the aligned image
        cropped_region = aligned_image[y1:y2, x1:x2]

        # Generate a unique cropped image filename with a timestamp to avoid overwrites
        timestamp = int(time.time())
        cropped_image_name = f"{os.path.splitext(os.path.basename(input_image_path))[0]}_crop_{region.id}_{timestamp}.jpg"
        cropped_image_path = os.path.join('app/static/uploads', cropped_image_name)

        # Save the cropped region
        cv2.imwrite(cropped_image_path, cropped_region)

        return cropped_image_path
    else:
        return None


##################################
### File: app/models.py
##################################
from . import db
from datetime import datetime
import os
from flask import current_app


class Model(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(128), nullable=False)
    description = db.Column(db.Text, nullable=True)
    template_image_filename = db.Column(db.String(256))  # Changed to store only filename

    good_image_1_filename = db.Column(db.String(256))
    good_image_2_filename = db.Column(db.String(256))
    good_image_3_filename = db.Column(db.String(256))
    good_image_4_filename = db.Column(db.String(256))
    good_image_5_filename = db.Column(db.String(256))

    # Aligned image paths
    good_image_1_aligned_filename = db.Column(db.String(256))
    good_image_2_aligned_filename = db.Column(db.String(256))
    good_image_3_aligned_filename = db.Column(db.String(256))
    good_image_4_aligned_filename = db.Column(db.String(256))
    good_image_5_aligned_filename = db.Column(db.String(256))

    status = db.Column(db.String(64), default='setup')  # 'setup', 'ready', 'running'
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, onupdate=datetime.utcnow)

    regions = db.relationship('ModelRegion', backref='model', lazy=True)
    runs = db.relationship('Run', backref='model', lazy=True)

    def get_image_path(self, image_filename):
        """Get the full local path for an image."""
        if image_filename:
            return os.path.join(current_app.config['UPLOADED_IMAGES_DEST'], image_filename)
        return None

    def get_template_image_path(self):
        """Return the full path to the template image."""
        return self.get_image_path(self.template_image_filename)


class ModelRegion(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    model_id = db.Column(db.Integer, db.ForeignKey('model.id'), nullable=False)
    name = db.Column(db.String(256))

    model_pkl = db.Column(db.String(256), nullable=True)

    fail_description = db.Column(db.Text, nullable=True)  # Added
    pass_description = db.Column(db.Text, nullable=True)  # Added

    x1 = db.Column(db.Integer, nullable=False)
    y1 = db.Column(db.Integer, nullable=False)
    x2 = db.Column(db.Integer, nullable=False)
    y2 = db.Column(db.Integer, nullable=False)

    # Store filenames instead of URLs for bad images
    bad_image_1_filename = db.Column(db.String(256))
    bad_image_2_filename = db.Column(db.String(256))
    bad_image_3_filename = db.Column(db.String(256))
    bad_image_4_filename = db.Column(db.String(256))
    bad_image_5_filename = db.Column(db.String(256))

    # Store filenames instead of URLs for aligned bad images
    bad_image_1_aligned_filename = db.Column(db.String(256))
    bad_image_2_aligned_filename = db.Column(db.String(256))
    bad_image_3_aligned_filename = db.Column(db.String(256))
    bad_image_4_aligned_filename = db.Column(db.String(256))
    bad_image_5_aligned_filename = db.Column(db.String(256))

    # Store filenames for cropped bad images
    bad_image_1_crop = db.Column(db.String(256))
    bad_image_2_crop = db.Column(db.String(256))
    bad_image_3_crop = db.Column(db.String(256))
    bad_image_4_crop = db.Column(db.String(256))
    bad_image_5_crop = db.Column(db.String(256))

    # Store filenames for cropped good images
    good_image_1_crop = db.Column(db.String(256))
    good_image_2_crop = db.Column(db.String(256))
    good_image_3_crop = db.Column(db.String(256))
    good_image_4_crop = db.Column(db.String(256))
    good_image_5_crop = db.Column(db.String(256))

    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, onupdate=datetime.utcnow)

    def get_bad_image_path(self, image_filename):
        """Get the full local path for a bad image."""
        if image_filename:
            return os.path.join(current_app.config['UPLOADED_IMAGES_DEST'], image_filename)
        return None


class Run(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    model_id = db.Column(db.Integer, db.ForeignKey('model.id'), nullable=False)
    s3_path = db.Column(db.String(256))
    result = db.Column(db.String(64))  # "55/60 PASS"
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

    # Relationship to Inspections
    inspections = db.relationship('Inspection', backref='run', lazy=True)


class Inspection(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    run_id = db.Column(db.Integer, db.ForeignKey('run.id'), nullable=True)
    model_id = db.Column(db.Integer, db.ForeignKey('model.id'), nullable=False)  # New field to store the model
    image_url = db.Column(db.String(256))
    pass_fail = db.Column(db.Boolean, default=False)
    reason = db.Column(db.Text, nullable=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

    # Establish a relationship with the Model
    model = db.relationship('Model', backref='inspections', lazy=True)


##################################
### File: app/__init__.py
##################################
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from flask_uploads import UploadSet, configure_uploads, IMAGES
from flask_bootstrap import Bootstrap
from config import Config

db = SQLAlchemy()
migrate = Migrate()
images = UploadSet('images', IMAGES)

def create_app():
    app = Flask(__name__)
    app.config.from_object(Config)

    db.init_app(app)
    migrate.init_app(app, db)

    configure_uploads(app, images)
    Bootstrap(app)

    from .routes import main as main_blueprint
    app.register_blueprint(main_blueprint)

    return app


##################################
### File: app/bedrock.py
##################################
import os

import boto3
import json
import base64
import time
import pickle
from datetime import datetime
import requests
from flask import current_app


def encode_image_to_base64_from_disk(image_path):
    # Open and encode image to base64
    with open(image_path, "rb") as image_file:
        return base64.b64encode(image_file.read()).decode('utf-8')



def send_request(model_id, new_message, conversation_history, save=False, region=None):
    start_time_request = time.time()
    print(f"{datetime.now()} Request Start")

    bedrock = boto3.client('bedrock-runtime')

    # Append the new message to conversation history
    conversation_history.append({
        "role": "user",
        "content": new_message
    })

    # Prepare the request body
    body = {
        "anthropic_version": "bedrock-2023-05-31",
        "max_tokens": 2000,
        "messages": conversation_history
    }

    # Convert the body to JSON and encode as bytes
    body_json = json.dumps(body).encode('utf-8')

    # Make the request to Bedrock
    response = bedrock.invoke_model(
        modelId=model_id,
        body=body_json,
        contentType="application/json",
        accept="application/json"
    )

    # Read the response body
    response_body = response['body'].read()

    # Parse the response
    assistant_response = json.loads(response_body)

    # Append the assistant's response to the conversation history
    conversation_history.append({
        "role": "assistant",
        "content": assistant_response["content"]
    })

    # Save the conversation history if needed
    if save and region:
        filename = f"{region.id}.pkl"
        save_path = os.path.join(current_app.config['UPLOADED_IMAGES_DEST'], filename)
        with open(save_path, 'wb') as f:
            pickle.dump(conversation_history, f)

    # Print total request time
    end_time_request = time.time()
    total_time = end_time_request - start_time_request
    print(f"{datetime.now()} Request End: {total_time:.2f} seconds")

    return assistant_response


def train_bedrock(good_img_urls, bad_img_urls, region):
    # Initialize conversation history
    conversation_history = []
    model_id = "anthropic.claude-3-5-sonnet-20240620-v1:0"

    # Process fail images
    fail_images_content = []
    for image_path in bad_img_urls:
        encoded_image = encode_image_to_base64_from_disk(image_path)  # Fetch from disk
        fail_images_content.append({
            "type": "image",
            "source": {
                "type": "base64",
                "media_type": "image/jpeg",
                "data": encoded_image
            }
        })

    # Add fail image description
    fail_images_content.append({
        "type": "text",
        "text": f"Your job is to examine examples of incorrect and correct images and learn how to tell if a new image is incorrect or correct. Here are 5 'incorrect' images. {region.fail_description} Provide descriptions for these images and end each description with the word 'incorrect'."
    })

    # Send fail images to Bedrock
    fail_response = send_request(model_id, fail_images_content, conversation_history)
    print(f"{datetime.now()} Response for 5 fail images:")
    print(fail_response)

    # Process pass images
    pass_images_content = []
    for image_path in good_img_urls:
        encoded_image = encode_image_to_base64_from_disk(image_path)  # Fetch from disk
        pass_images_content.append({
            "type": "image",
            "source": {
                "type": "base64",
                "media_type": "image/jpeg",
                "data": encoded_image
            }
        })

    # Add pass image description
    pass_images_content.append({
        "type": "text",
        "text": f"Here are 5 'correct' images. {region.pass_description} Provide descriptions for these images and end each description with the word 'correct'."
    })

    # Send pass images to Bedrock
    pass_response = send_request(model_id, pass_images_content, conversation_history, save=True, region=region)
    print(f"{datetime.now()} Response for 5 pass images:")
    print(pass_response)



##################################
### File: app/routes.py
##################################
from flask import Blueprint, render_template, request, redirect, url_for, session, current_app

from .align import align_and_crop_regions, crop_regions
from .bedrock import train_bedrock
from .models import db, Model, ModelRegion, Run, Inspection
from . import images
import boto3
import os

main = Blueprint('main', __name__)

# AWS S3 client initialization
s3_client = boto3.client('s3')


def run_inspection(image):
    """Mock function to return 'pass' for every image."""
    pass_fail = True  # Simulated "pass" result
    reason = "All regions passed"
    return pass_fail, reason


@main.route('/models/<int:model_id>/inspect', methods=['GET', 'POST'])
def inspect(model_id):
    model = Model.query.get_or_404(model_id)

    if request.method == 'POST':
        image = request.files['image']  # Get the uploaded image
        if image:
            # Save the uploaded image to the uploads folder
            filename = images.save(image)
            image_path = url_for('static', filename=f'uploads/{filename}')

            # Mock running inspection
            pass_fail, reason = run_inspection(image_path)

            # Create new Inspection instance and link it to the model
            new_inspection = Inspection(
                run_id=None,  # Assuming there is no run associated yet
                model_id=model.id,  # Link to the model
                image_url=image_path,
                pass_fail=pass_fail,
                reason=reason
            )
            db.session.add(new_inspection)
            db.session.commit()

            # Redirect to the result page with the inspection ID
            return redirect(url_for('main.inspection_result', inspection_id=new_inspection.id))

    return render_template('inspect.html', model=model)



@main.route('/inspection_result/<int:inspection_id>')
def inspection_result(inspection_id):
    # Retrieve the inspection data from the database using the inspection_id
    inspection = Inspection.query.get_or_404(inspection_id)

    return render_template('inspection_result.html', inspection=inspection)


@main.route('/')
@main.route('/models')
def model_list():
    models = Model.query.all()

    # Prepare model data including last run information
    model_data = []
    for model in models:
        last_run = Run.query.filter_by(model_id=model.id).order_by(Run.created_at.desc()).first()
        if last_run:
            model_data.append({
                'model': model,
                'last_run': last_run.created_at,
                'last_run_result': last_run.result
            })
        else:
            model_data.append({
                'model': model,
                'last_run': None,
                'last_run_result': None
            })

    return render_template('model_list.html', model_data=model_data)


@main.route('/models/new', methods=['GET', 'POST'])
def model_create():
    if request.method == 'POST':
        name = request.form['name']
        description = request.form['description']

        new_model = Model(name=name, description=description)
        db.session.add(new_model)
        db.session.commit()

        session['model_id'] = new_model.id
        return redirect(url_for('main.upload_template_image', model_id=new_model.id))

    return render_template('model_create.html')


@main.route('/models/upload_template_image/<int:model_id>', methods=['GET', 'POST'])
def upload_template_image(model_id):
    model = Model.query.get(model_id)
    if not model:
        return redirect(url_for('main.model_create'))
    session['model_id'] = model_id

    if request.method == 'POST' and 'template_image' in request.files:
        filename = images.save(request.files['template_image'])  # Save only the filename
        model.template_image_filename = filename
        db.session.commit()

        return redirect(url_for('main.upload_good_images', model_id=model_id))

    return render_template('model_template_image.html', model=model)


@main.route('/models/upload_good_images/<int:model_id>', methods=['GET', 'POST'])
def upload_good_images(model_id):
    model = Model.query.get(model_id)
    if not model:
        return redirect(url_for('main.model_create'))
    session['model_id'] = model_id

    if request.method == 'POST':
        for i in range(1, 6):
            if f'good_image_{i}' in request.files:
                filename = images.save(request.files[f'good_image_{i}'])  # Store only filename
                setattr(model, f'good_image_{i}_filename', filename)
        db.session.commit()

        return redirect(url_for('main.draw_regions', model_id=model_id))

    return render_template('model_good_images.html', model=model)


@main.route('/models/upload_region_images', methods=['POST'])
def upload_region_images():
    model_id = session.get('model_id')
    if not model_id:
        return redirect(url_for('main.model_create'))

    x1 = request.form['x1']
    y1 = request.form['y1']
    x2 = request.form['x2']
    y2 = request.form['y2']
    region_name = request.form['region_name']
    fail_description = request.form['fail_description']
    pass_description = request.form['pass_description']

    bad_images = []
    for i in range(1, 6):
        if f'bad_image_{i}' in request.files:
            filename = images.save(request.files[f'bad_image_{i}'])
            bad_images.append(filename)

    new_region = ModelRegion(model_id=model_id, x1=x1, y1=y1, x2=x2, y2=y2, name=region_name)

    # Assign the saved filenames to the new region
    for i, filename in enumerate(bad_images, 1):
        setattr(new_region, f'bad_image_{i}_filename', filename)

    db.session.add(new_region)
    db.session.commit()

    # Save fail and pass descriptions for the model
    model = Model.query.get(model_id)
    model.fail_description = fail_description
    model.pass_description = pass_description
    db.session.commit()

    return redirect(url_for('main.draw_regions', model_id=model_id))


@main.route('/models/draw_regions/<int:model_id>', methods=['GET', 'POST'])
def draw_regions(model_id):
    model = Model.query.get(model_id)
    if not model:
        return redirect(url_for('main.model_create'))
    session['model_id'] = model_id

    return render_template('model_regions.html', model=model)


@main.route('/regions/<int:region_id>/data', methods=['GET'])
def get_region_data(region_id):
    region = ModelRegion.query.get_or_404(region_id)
    region_data = {
        'name': region.name,
        'x1': region.x1,
        'y1': region.y1,
        'x2': region.x2,
        'y2': region.y2,
        'bad_image_1_url': region.bad_image_1_url,
        'bad_image_2_url': region.bad_image_2_url,
        'bad_image_3_url': region.bad_image_3_url,
        'bad_image_4_url': region.bad_image_4_url,
        'bad_image_5_url': region.bad_image_5_url,
        'fail_description': region.fail_description,
        'pass_description': region.pass_description
    }
    return region_data


@main.route('/models/finish_regions', methods=['POST'])
def finish_regions():
    model_id = session.get('model_id')
    if not model_id:
        return redirect(url_for('main.model_create'))

    model = Model.query.get(model_id)

    # Process good images and align them
    for i in range(1, 6):
        good_image_filename = getattr(model, f'good_image_{i}_filename')  # Now fetching filename
        if good_image_filename:
            good_image_path = os.path.join('app/static/uploads', good_image_filename)
            aligned_image_path = align_and_crop_regions(good_image_path, model)
            if aligned_image_path:
                setattr(model, f'good_image_{i}_aligned_filename', os.path.basename(aligned_image_path))  # Save filename
            else:
                setattr(model, f'good_image_{i}_aligned_filename', None)

    # Process bad images for each region and align them
    for region in model.regions:
        for i in range(1, 6):
            bad_image_filename = getattr(region, f'bad_image_{i}_filename')  # Now fetching filename
            if bad_image_filename:
                bad_image_path = os.path.join('app/static/uploads', bad_image_filename)
                aligned_image_path = align_and_crop_regions(bad_image_path, model)
                if aligned_image_path:
                    setattr(region, f'bad_image_{i}_aligned_filename', os.path.basename(aligned_image_path))  # Save filename
                else:
                    setattr(region, f'bad_image_{i}_aligned_filename', None)

    db.session.commit()

    return redirect(url_for('main.review_images', model_id=model.id))


@main.route('/models/<int:model_id>/review_images', methods=['GET', 'POST'])
def review_images(model_id):
    model = Model.query.get_or_404(model_id)

    # If new images were uploaded, handle alignment
    if request.method == 'POST':
        for i in range(1, 6):
            if f'good_image_{i}' in request.files:
                filename = images.save(request.files[f'good_image_{i}'])
                setattr(model, f'good_image_{i}_filename', filename)  # Save the filename instead of URL
                good_image_path = os.path.join('app/static/uploads', filename)
                aligned_image_path = align_and_crop_regions(good_image_path, model)
                if aligned_image_path:
                    setattr(model, f'good_image_{i}_aligned_filename', os.path.basename(aligned_image_path))  # Save filename
                else:
                    setattr(model, f'good_image_{i}_aligned_filename', None)

        for region in model.regions:
            for i in range(1, 6):
                if f'bad_image_{region.id}_{i}' in request.files:
                    filename = images.save(request.files[f'bad_image_{region.id}_{i}'])
                    setattr(region, f'bad_image_{i}_filename', filename)  # Save the filename instead of URL
                    bad_image_path = os.path.join('app/static/uploads', filename)
                    aligned_image_path = align_and_crop_regions(bad_image_path, model)
                    if aligned_image_path:
                        setattr(region, f'bad_image_{i}_aligned_filename', os.path.basename(aligned_image_path))  # Save filename
                    else:
                        setattr(region, f'bad_image_{i}_aligned_filename', None)

        db.session.commit()

    # Check if all images are aligned
    all_images_aligned = True
    missing_good_images = {}
    for i in range(1, 6):
        aligned_image = getattr(model, f'good_image_{i}_aligned_filename')
        if not aligned_image:
            missing_good_images[f'good_image_{i}'] = True
            all_images_aligned = False

    missing_bad_images_by_region = {}
    for region in model.regions:
        missing_bad_images = {}
        for i in range(1, 6):
            aligned_image = getattr(region, f'bad_image_{i}_aligned_filename')
            if not aligned_image:
                missing_bad_images[f'bad_image_{i}'] = True
                all_images_aligned = False
        missing_bad_images_by_region[region.name] = missing_bad_images

    if all_images_aligned:
        return render_template('model_review_images.html', all_images_aligned=True, model=model)

    return render_template('model_review_images.html', model=model, missing_good_images=missing_good_images, missing_bad_images_by_region=missing_bad_images_by_region, all_images_aligned=False)


@main.route('/models/finish/<int:model_id>', methods=['POST'])
def finish_model(model_id):
    model = Model.query.get_or_404(model_id)

    # For each region, align good and bad images, crop regions, and save URLs
    for region in model.regions:
        good_img_urls = []
        bad_img_urls = []
        output_dir = current_app.config['UPLOADED_IMAGES_DEST']

        # Align and crop good images
        for i in range(1, 6):
            good_image_filename = getattr(model, f'good_image_{i}_aligned_filename')
            if good_image_filename:
                good_image_path = os.path.join(output_dir, good_image_filename)
                cropped_good_image = crop_regions(good_image_path, model, region)
                if cropped_good_image:
                    setattr(region, f'good_image_{i}_crop', os.path.basename(cropped_good_image))
                    good_img_urls.append(cropped_good_image)

        # Align and crop bad images
        for i in range(1, 6):
            bad_image_filename = getattr(region, f'bad_image_{i}_aligned_filename')
            if bad_image_filename:
                bad_image_path = os.path.join(output_dir, bad_image_filename)
                cropped_bad_image = crop_regions(bad_image_path, model, region)
                if cropped_bad_image:
                    setattr(region, f'bad_image_{i}_crop', os.path.basename(cropped_bad_image))
                    bad_img_urls.append(cropped_bad_image)

        # Run bedrock training
        train_bedrock(good_img_urls, bad_img_urls, region)

    model.status = 'ready'
    db.session.commit()

    return redirect(url_for('main.model_list'))


@main.route('/models/<int:model_id>')
def model_detail(model_id):
    model = Model.query.get_or_404(model_id)

    # If the model is still in setup, redirect to the relevant step
    if model.status == 'setup':
        if not model.template_image_filename:
            return redirect(url_for('main.upload_template_image', model_id=model_id))
        elif not all([
            model.good_image_1_filename,
            model.good_image_2_filename,
            model.good_image_3_filename,
            model.good_image_4_filename,
            model.good_image_5_filename
        ]):
            return redirect(url_for('main.upload_good_images', model_id=model_id))
        else:
            # Check if all good images have aligned versions
            all_images_aligned = any([
                getattr(model, f'good_image_{i}_aligned_filename') for i in range(1, 6)
            ])
            if all_images_aligned:
                return redirect(url_for('main.review_images', model_id=model_id))
            else:
                return redirect(url_for('main.draw_regions', model_id=model_id))

    # Generate full image URLs/paths for template and good images
    template_image_url = model.get_image_path(model.template_image_filename)
    good_images_urls = [
        model.get_image_path(model.good_image_1_filename),
        model.get_image_path(model.good_image_2_filename),
        model.get_image_path(model.good_image_3_filename),
        model.get_image_path(model.good_image_4_filename),
        model.get_image_path(model.good_image_5_filename),
    ]

    return render_template('model_detail.html', model=model, template_image_url=template_image_url)


@main.route('/models/<int:model_id>/delete', methods=['POST'])
def delete_model(model_id):
    model = Model.query.get_or_404(model_id)

    # Remove all related regions for this model
    ModelRegion.query.filter_by(model_id=model_id).delete()

    # Delete the model
    db.session.delete(model)
    db.session.commit()

    return redirect(url_for('main.model_list'))


@main.route('/models/<int:model_id>/run', methods=['POST'])
def run_model(model_id):
    model = Model.query.get_or_404(model_id)
    model.status = 'running'
    db.session.commit()

    s3_path = request.form['s3_path']
    new_run = Run(model_id=model.id, s3_path=s3_path)
    db.session.add(new_run)
    db.session.commit()

    # Simulate S3 image processing
    for i in range(10):  # Mock 10 images for the run
        image_url = f"https://mocked-s3-url.com/image_{i}.jpg"
        pass_fail, reason = run_inspection(image_url)
        inspection = Inspection(run_id=new_run.id, image_url=image_url, pass_fail=pass_fail, reason=reason)
        db.session.add(inspection)

    db.session.commit()

    model.status = 'ready'
    db.session.commit()

    return redirect(url_for('main.run_detail', run_id=new_run.id))


@main.route('/runs/<int:run_id>')
def run_detail(run_id):
    run = Run.query.get_or_404(run_id)
    inspections = Inspection.query.filter_by(run_id=run_id).all()
    return render_template('run_detail.html', run=run, inspections=inspections)


@main.route('/runs')
def run_list():
    runs = Run.query.all()
    return render_template('run_list.html', runs=runs)


##################################
### File: app/static/styles.css
##################################
h3 {
    font-weight:700 !important;
}

##################################
### File: app/static/uploads/12.pkl
##################################
##################################
### File: app/static/uploads/1.pkl
##################################
##################################
### File: app/templates/base.html
##################################
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Inspection App</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    {% block styles %}{% endblock %}
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-lg navbar-light bg-light">
            <div class="container">
                <a class="navbar-brand" href="{{ url_for('main.model_list') }}"><img src="{{ url_for('static', filename='logo.png') }}" style="max-width:120px;"> </a>
                <div class="collapse navbar-collapse">
                    <ul class="navbar-nav ms-auto" style="font-size:20px;">
                        <li class="nav-item">
                            <a class="nav-link" href="{{ url_for('main.model_list') }}">Models</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="{{ url_for('main.run_list') }}">Runs</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>
    <div class="container my-4 pb-5">
        {% block content %}{% endblock %}
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>


##################################
### File: app/templates/inspect.html
##################################
{% extends 'base.html' %}

{% block content %}
<h2>Test on Image for Model: {{ model.name }}</h2>
<p>Upload an image to test it against the model: {{ model.name }}</p>
<form method="POST" enctype="multipart/form-data">
    <div class="mb-3">
        <label for="image" class="form-label">Choose an Image</label>
        <input type="file" id="image" name="image" class="form-control" accept="image/*" required>
    </div>
    <button type="submit" class="btn btn-primary">Run Inspection</button>
</form>
{% endblock %}


##################################
### File: app/templates/model_list.html
##################################
{% extends 'base.html' %}

{% block content %}
<div class="d-flex justify-content-between align-items-center">
    <h1>Models</h1>
    <a href="{{ url_for('main.model_create') }}" class="btn btn-primary">Create New Model</a>
</div>

<table class="table mt-4">
    <thead>
        <tr>
            <th>Name</th>
            <th>Description</th>
            <th>Status</th>
            <th>Last Run</th>
            <th>Last Run Result</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        {% for entry in model_data %}
        <tr>
            <td><strong>{{ entry.model.name }}</strong></td>
            <td>{{ entry.model.description }}</td>
            <td>
                {% if entry.model.status == 'ready' %}
                    <span class="badge bg-success">Ready</span>
                {% elif entry.model.status == 'setup' %}
                    <span class="badge bg-secondary">Setup</span>
                {% elif entry.model.status == 'running' %}
                    <span class="badge bg-warning text-dark">Running</span>
                {% endif %}
            </td>
            <td>
                {% if entry.last_run %}
                    {{ entry.last_run.strftime('%Y-%m-%d %H:%M:%S') }}
                {% else %}
                    -
                {% endif %}
            </td>
            <td>
                {% if entry.last_run_result %}
                    {{ entry.last_run_result }}
                {% else %}
                    -
                {% endif %}
            </td>
            <td>
                <a href="{{ url_for('main.model_detail', model_id=entry.model.id) }}" class="btn btn-primary">View</a>
                <form action="{{ url_for('main.delete_model', model_id=entry.model.id) }}" method="POST" style="display:inline;">
                    <button type="submit" class="btn btn-danger" onclick="return confirm('Are you sure you want to delete this model?');">Delete</button>
                </form>
            </td>
        </tr>
        {% endfor %}
    </tbody>
</table>
{% endblock %}


##################################
### File: app/templates/model_detail.html
##################################
{% extends 'base.html' %}

{% block styles %}
    <style>
        /* Optional styling if needed */
    </style>
{% endblock %}

{% block content %}
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2>Model: {{ model.name }}</h2>
            <p><strong>Status:</strong>
                {% if model.status == 'ready' %}
                    <span class="badge bg-success">Ready</span>
                {% elif model.status == 'setup' %}
                    <span class="badge bg-secondary">Setup</span>
                {% elif model.status == 'running' %}
                    <span class="badge bg-warning text-dark">Running</span>
                {% endif %}
            </p>
            <p><strong>Description: </strong>{{ model.description }}</p>
        </div>
        <div class="d-flex flex-column">
            <a href="{{ url_for('main.inspect', model_id=model.id) }}" class="btn btn-primary mb-2">Test on Image</a>
            <a href="{{ url_for('main.run_model', model_id=model.id) }}" class="btn btn-primary">Run on S3</a>
        </div>
    </div>

    <!-- Uploaded Images Section -->
    <div class="p-3 rounded mb-3" style="text-align:center;">
        <h3 style="text-align:center;">Template Image</h3>
        <img src="{{ url_for('static', filename='uploads/' + model.template_image_filename) }}"
             class="img-thumbnail" alt="Template Image"
             style="width: 500px;"><br><br>
    </div>

    <!-- Good Images Section -->
    <div class="bg-light p-3 rounded mb-3" style="text-align:center;">
        <h3 style="text-align:center;">Good Images</h3>
        {% for i in range(1, 6) %}
            {% set good_image_filename = getattr(model, 'good_image_' ~ i ~ '_filename') %}
            {% if good_image_filename %}
                <img src="{{ url_for('static', filename='uploads/' + good_image_filename) }}"
                     class="img-thumbnail"
                     alt="Good Image {{ i }}" style="width: 150px;">
            {% else %}
                <p>Good Image {{ i }} not uploaded</p>
            {% endif %}
        {% endfor %}
    </div>

    <!-- Regions Section -->
    <div class="bg-light p-3 rounded mb-3" style="text-align:center;">
        <h3 style="text-align:center;">Regions</h3>
        {% for region in model.regions %}
            <h4>{{ region.name }}</h4>
            <p>Coordinates: ({{ region.x1 }}, {{ region.y1 }}) to ({{ region.x2 }}, {{ region.y2 }})</p>
            <div class="mt-2" style="text-align:center;">
                <h5>Bad Images</h5>
                {% for i in range(1, 6) %}
                    {% set bad_image_filename = getattr(region, 'bad_image_' ~ i ~ '_filename') %}
                    {% if bad_image_filename %}
                        <img src="{{ url_for('static', filename='uploads/' + bad_image_filename) }}"
                             class="img-thumbnail"
                             alt="Bad Image {{ i }}" style="width: 150px;">
                    {% else %}
                        <p>Bad Image {{ i }} not uploaded</p>
                    {% endif %}
                {% endfor %}
            </div>
            <br/><br/>
        {% endfor %}
    </div>
{% endblock %}


##################################
### File: app/templates/model_review_images.html
##################################
{% extends 'base.html' %}

{% block content %}

    {% if all_images_aligned %}
        <h2>Step 5/5: Train Model</h2>
        <p>All images aligned. Model is ready to train - will take approximately 1 minute, do not close the page!</p>
        <form method="POST" action="{{ url_for('main.finish_model', model_id=model.id) }}" id="trainModelForm">
            <button type="submit" class="btn btn-success" id="trainModelButton">
                Train Model
            </button>
        </form>
    {% else %}
        <h2>Step 5/5: Review Images</h2>
        <p style="text-align:center; color:red;">Not all images could align onto the template - please upload new
            images</p>

        <h3>Good Images</h3>
        <form method="POST" enctype="multipart/form-data">
            {% for i in range(1, 6) %}
                <div class="mb-3">
                    {% set good_image_filename = getattr(model, 'good_image_' ~ i ~ '_filename') %}
                    {% set aligned_good_image_filename = getattr(model, 'good_image_' ~ i ~ '_aligned_filename') %}

                    {% if not aligned_good_image_filename %}

                        <p>Good Image {{ i }} (Original)</p>
                        <img src="{{ url_for('static', filename='uploads/' + good_image_filename) }}"
                             class="img-thumbnail"
                             alt="Good Image {{ i }}" style="width: 150px;">

                        <p style="color: red;">Alignment Failed for Good Image {{ i }}</p>
                        <label for="good_image_{{ i }}">Upload new Good Image {{ i }}</label>
                        <input type="file" id="good_image_{{ i }}" name="good_image_{{ i }}" class="form-control"
                               accept="image/*" style="max-width:300px;">
                    {% endif %}
                </div>
            {% endfor %}

            <h3>Bad Images</h3>
            {% for region in model.regions %}
                <h4>Region: {{ region.name }}</h4>
                {% for i in range(1, 6) %}
                    <div class="mb-3">
                        {% set bad_image_filename = getattr(region, 'bad_image_' ~ i ~ '_filename') %}
                        {% set aligned_bad_image_filename = getattr(region, 'bad_image_' ~ i ~ '_aligned_filename') %}

                        {% if not aligned_bad_image_filename %}
                            <p>Bad Image {{ i }} (Original)</p>
                            <img src="{{ url_for('static', filename='uploads/' + bad_image_filename) }}"
                                 class="img-thumbnail"
                                 alt="Bad Image {{ i }}" style="width: 150px;">

                            <p style="color: red;">Alignment Failed for Bad Image {{ i }}</p>
                            <label for="bad_image_{{ region.id }}_{{ i }}">Upload new Bad Image {{ i }}</label>
                            <input type="file" id="bad_image_{{ region.id }}_{{ i }}"
                                   name="bad_image_{{ region.id }}_{{ i }}" class="form-control" accept="image/*"  style="max-width:300px;">
                        {% endif %}
                    </div>
                {% endfor %}
            {% endfor %}

            <button type="submit" class="btn btn-primary">Upload Replacement Images</button>
        </form>
    {% endif %}

    <script>
        document.getElementById('trainModelForm').addEventListener('submit', function () {
            const trainButton = document.getElementById('trainModelButton');
            trainButton.disabled = true;
            trainButton.innerHTML = `
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                Please wait...
            `;
        });
    </script>

{% endblock %}


##################################
### File: app/templates/model_good_images.html
##################################
{% extends 'base.html' %}

{% block content %}
<h2>Step 3/5: Upload Good Images</h2>
<form method="POST" action="{{ url_for('main.upload_good_images', model_id=model.id) }}" enctype="multipart/form-data">
    {% for i in range(1, 6) %}
        <div class="mb-3">
            <label for="good_image_{{ i }}" class="form-label">Choose Good Image {{ i }}</label>
            <input type="file" id="good_image_{{ i }}" name="good_image_{{ i }}" class="form-control" accept="image/*" onchange="previewImage(event, {{ i }})" style="max-width:300px;">
            <img id="imagePreview_{{ i }}" style="max-width: 300px; margin-top: 20px;">
        </div>
    {% endfor %}
    <button type="submit" class="btn btn-primary">Next</button>
</form>

<script>
    function previewImage(event, index) {
        const image = document.getElementById('imagePreview_' + index);
        image.src = URL.createObjectURL(event.target.files[0]);
        image.style.display = 'block';
    }
</script>
{% endblock %}


##################################
### File: app/templates/run_list.html
##################################
{% extends 'base.html' %}

{% block content %}
<h1>Runs</h1>
<table class="table mt-4">
    <thead>
        <tr>
            <th>Run ID</th>
            <th>Model Name</th>
            <th>S3 Path</th>
            <th>Result</th>
        </tr>
    </thead>
    <tbody>
        {% for run in runs %}
        <tr>
            <td>{{ run.id }}</td>
            <td>{{ run.model.name }}</td>
            <td>{{ run.s3_path }}</td>
            <td>{{ run.result }}</td>
        </tr>
        {% endfor %}
    </tbody>
</table>
{% endblock %}


##################################
### File: app/templates/model_create.html
##################################
{% extends 'base.html' %}

{% block content %}
<h2>Step 1/5: Create Model</h2>
<form method="POST" action="{{ url_for('main.model_create') }}">
    <div class="mb-3">
        <label for="name" class="form-label">Model Name</label>
        <input type="text" id="name" name="name" class="form-control" required>
    </div>
    <div class="mb-3">
        <label for="description" class="form-label">Description</label>
        <textarea id="description" name="description" class="form-control" required></textarea>
    </div>
    <button type="submit" class="btn btn-primary">Create Model</button>
</form>
{% endblock %}


##################################
### File: app/templates/inspection_result.html
##################################
{% extends 'base.html' %}

{% block content %}
<h2>Inspection Result</h2>
<img src="{{ inspection.image_url }}" alt="Uploaded Image" style="max-width: 300px;" class="img-thumbnail mb-3">
<p><strong>Result: </strong> {{ 'PASS' if inspection.pass_fail else 'FAIL' }}</p>
<p><strong>Reason: </strong> {{ inspection.reason }}</p>
<a href="{{ url_for('main.model_detail', model_id=inspection.model.id) }}" class="btn btn-primary">Back to Model</a>
{% endblock %}


##################################
### File: app/templates/model_template_image.html
##################################
{% extends 'base.html' %}

{% block content %}
<h2>Step 2/5: Upload Template Image</h2>
<form method="POST" action="{{ url_for('main.upload_template_image', model_id=model.id) }}" enctype="multipart/form-data">
    <div class="mb-3">
        <label for="template_image" class="form-label">Choose Template Image</label>
        <input type="file" id="template_image" name="template_image" class="form-control" accept="image/*" onchange="previewImage(event)" required>
        <img id="imagePreview" style="max-width: 300px; margin-top: 20px;">
    </div>
    <button type="submit" class="btn btn-primary">Next</button>
</form>

<script>
    function previewImage(event) {
        const image = document.getElementById('imagePreview');
        image.src = URL.createObjectURL(event.target.files[0]);
        image.style.display = 'block';
    }
</script>
{% endblock %}


##################################
### File: app/templates/model_regions.html
##################################
{% extends 'base.html' %}

{% block content %}
    <h2>Step 4/5: Define Bad Regions</h2>
    <h4 class="py-5">Draw regions on the template image, name them, and upload bad image examples for each region. You should have a region for each key component of the thing being inspected.</h4>

    <div class="row">
        <!-- Sidebar for region names and uploading bad images -->
        <div class="col-md-4">
            <!-- Show list of regions added -->
            <div class="d-flex justify-content-between align-items-center mb-2">
                <h4>Regions</h4>
                <button id="addRegionBtn" class="btn btn-primary" onclick="addNewRegion()">Add Region</button>
            </div>

            <ul id="regionList" class="list-group mb-3">
                {% for region in model.regions %}
                    <li class="list-group-item" data-region-id="{{ region.id }}"
                        onclick="selectRegion({{ region.id }}, {{ region.x1 }}, {{ region.y1 }}, {{ region.x2 }}, {{ region.y2 }}, {{ region.bad_images|default([])|tojson }})">
                        {{ region.name }} ({{ region.x1 }}, {{ region.y1 }} - {{ region.x2 }}, {{ region.y2 }})
                    </li>
                {% endfor %}
            </ul>

            <!-- Instructions to draw a region -->
            <p id="drawInstruction" style="display:none; color:blue;">Draw region on the image.</p>

            <!-- Form to name the region and upload bad images -->
            <form id="regionForm" method="POST" action="{{ url_for('main.upload_region_images') }}"
                  enctype="multipart/form-data" style="display:none;">
                <input type="hidden" name="x1" id="x1">
                <input type="hidden" name="y1" id="y1">
                <input type="hidden" name="x2" id="x2">
                <input type="hidden" name="y2" id="y2">

                <h4>Region Name</h4>
                <div class="mb-3">
                    <input type="text" id="region_name" name="region_name" class="form-control" required>
                </div>

                <h4>Fail Description</h4>
                <div class="mb-3">
                    <textarea id="fail_description" name="fail_description" class="form-control" required placeholder="Describe what FAIL looks like in this region"></textarea>
                </div>

                <h4>Pass Description</h4>
                <div class="mb-3">
                    <textarea id="pass_description" name="pass_description" class="form-control" required placeholder="Describe what PASS looks like in this region"></textarea>
                </div>

                <h4>Upload Bad Images for the Region:</h4>
                {% for i in range(1, 6) %}
                    <div class="mb-3">
                        <label for="bad_image_{{ i }}" class="form-label">Upload Bad Image {{ i }}</label>
                        <input type="file" id="bad_image_{{ i }}" name="bad_image_{{ i }}" class="form-control"
                               accept="image/*" onchange="previewImage(event, {{ i }})">
                        <img id="badImagePreview_{{ i }}" style="max-width: 100px; margin-top: 10px; display:none;">
                    </div>
                {% endfor %}

                <button type="submit" class="btn btn-primary">Save Region</button>
                <button type="button" class="btn btn-danger" id="resetRegion">Cancel</button>
            </form>

            <!-- Button to save all model regions -->
            <form method="POST" action="{{ url_for('main.finish_regions') }}">
                <button id="saveRegionsBtn" class="btn btn-success btn-block mt-3" style="width: 100%;" disabled>Save Model Regions</button>
            </form>
        </div>

        <!-- Canvas for drawing the regions -->
        <div class="col-md-8">
            <img id="templateImage" src="{{ url_for('static', filename='uploads/' ~ model.template_image_filename) }}"
                 alt="Template Image" class="img-fluid mb-3" style="display:none;">
            <canvas id="templateCanvas" class="border"></canvas>
        </div>
    </div>

    <script>
        // Initialize canvas and drawing variables
        const canvas = document.getElementById('templateCanvas');
        const ctx = canvas.getContext('2d');
        let startX, startY, isDrawing = false;
        let regions = {{ model.regions|length }};  // Initialize regions count based on existing regions
        let currentRegion = null;

        const templateImage = document.getElementById('templateImage');
        const regionForm = document.getElementById('regionForm');
        const regionList = document.getElementById('regionList');
        const addRegionBtn = document.getElementById('addRegionBtn');
        const drawInstruction = document.getElementById('drawInstruction');
        const saveRegionsBtn = document.getElementById('saveRegionsBtn');  // Get the Save Model Regions button

        // Initially disable drawing and the save button
        let drawingEnabled = false;
        let selectedRegionId = null;

        // Disable the "Save Model Regions" button initially if no regions exist
        if (regions === 0) {
            saveRegionsBtn.disabled = true;
            saveRegionsBtn.style.display = 'none';  // Hide if no regions exist
        } else {
            saveRegionsBtn.disabled = false;
            saveRegionsBtn.style.display = 'block';  // Show if regions exist
        }

        // Draw the template image on the canvas
        templateImage.onload = function () {
            canvas.width = templateImage.width;
            canvas.height = templateImage.height;
            ctx.drawImage(templateImage, 0, 0, canvas.width, canvas.height);
            templateImage.style.display = 'none'; // hide the actual image element
            drawRegions(); // Draw existing regions on load
        };

        templateImage.src = templateImage.src; // Trigger the image load

        // Drawing functionality
        canvas.addEventListener('mousedown', (e) => {
            if (!drawingEnabled) return; // Only draw after clicking "Add Region"
            isDrawing = true;
            [startX, startY] = [e.offsetX, e.offsetY];
        });

        canvas.addEventListener('mousemove', (e) => {
            if (!isDrawing) return;
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.drawImage(templateImage, 0, 0, canvas.width, canvas.height); // Redraw the image
            drawRegions(); // Redraw saved regions
            ctx.strokeRect(startX, startY, e.offsetX - startX, e.offsetY - startY); // Draw the new region being added
        });

        canvas.addEventListener('mouseup', (e) => {
            if (!drawingEnabled) return;
            isDrawing = false;
            document.getElementById('x1').value = startX;
            document.getElementById('y1').value = startY;
            document.getElementById('x2').value = e.offsetX;
            document.getElementById('y2').value = e.offsetY;
            regionForm.style.display = 'block';
            drawInstruction.style.display = 'none'; // Hide "Draw region" message
            drawingEnabled = false;
            addRegionBtn.style.display = 'none'; // Hide the "Add Region" button while adding
            hideSaveRegionsButton(); // Hide the save button while adding a new region
        });

        // Draw all saved regions on the canvas
        function drawRegions() {
            {% for region in model.regions %}
            drawRegion({{ region.x1 }}, {{ region.y1 }}, {{ region.x2 }}, {{ region.y2 }});
            {% endfor %}
        }

        // Draw a single region
        function drawRegion(x1, y1, x2, y2, highlight = false) {
            ctx.strokeStyle = highlight ? 'red' : 'black';
            ctx.strokeRect(x1, y1, x2 - x1, y2 - y1);
        }

        // Add new region
        function addNewRegion() {
            // Reset the form fields
            regionForm.reset();

            // Clear image previews
            for (let i = 1; i <= 5; i++) {
                const imgPreview = document.getElementById(`badImagePreview_${i}`);
                imgPreview.src = '';
                imgPreview.style.display = 'none';
            }

            regionForm.style.display = 'none'; // Hide the form initially
            drawInstruction.style.display = 'block'; // Show "Draw region on the image"
            addRegionBtn.style.display = 'none'; // Hide "Add Region" button
            drawingEnabled = true;

            // Clear selection in the sidebar
            document.querySelectorAll('.list-group-item').forEach(item => item.classList.remove('active'));

            // Deselect any previously selected region
            selectedRegionId = null;

            // Hide the save button while adding a new region
            hideSaveRegionsButton();
        }

        // Deselect region and hide form
        function deselectRegion() {
            document.querySelectorAll('.list-group-item').forEach(item => item.classList.remove('active'));
            regionForm.style.display = 'none'; // Hide the form
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.drawImage(templateImage, 0, 0, canvas.width, canvas.height);
            drawRegions(); // Redraw all regions
            selectedRegionId = null;
        }

        // Enable the "Save Model Regions" button if at least one region exists
        function updateSaveRegionsButton() {
            if (regions > 0) {
                saveRegionsBtn.disabled = false;
                saveRegionsBtn.style.display = 'block';  // Show the button
            } else {
                hideSaveRegionsButton();
            }
        }

        // Hide the "Save Model Regions" button
        function hideSaveRegionsButton() {
            saveRegionsBtn.disabled = true;
            saveRegionsBtn.style.display = 'none';  // Hide the button
        }

        // Automatically zoom out until the entire canvas is visible
        function autoZoomOutCanvas() {
            const canvas = document.getElementById('templateCanvas');
            const canvasContainer = canvas.parentElement;
            const canvasWidth = canvas.width;
            const canvasHeight = canvas.height;
            const containerWidth = canvasContainer.clientWidth;
            const containerHeight = canvasContainer.clientHeight;

            let scaleFactor = Math.min(containerWidth / canvasWidth, containerHeight / canvasHeight);
            if (scaleFactor < 1) {
                document.body.style.transform = `scale(${scaleFactor})`;
                document.body.style.transformOrigin = 'top left';
            }
        }

        // Call the zoom out function after the canvas is loaded
        window.onload = function () {
            autoZoomOutCanvas();
        };

    </script>

{% endblock %}


##################################
### File: app/templates/run_detail.html
##################################
{% extends 'base.html' %}

{% block content %}
<h2>Run Details</h2>
<p>Model: {{ run.model.name }}</p>
<p>S3 Path: {{ run.s3_path }}</p>
<h3>Inspection Results</h3>
<table class="table table-striped">
    <thead>
        <tr>
            <th>Image</th>
            <th>Result</th>
            <th>Reason</th>
        </tr>
    </thead>
    <tbody>
        {% for inspection in inspections %}
        <tr>
            <td><img src="{{ inspection.image_url }}" alt="Inspection Image" style="width: 100px;"></td>
            <td>{{ 'PASS' if inspection.pass_fail else 'FAIL' }}</td>
            <td>{{ inspection.reason }}</td>
        </tr>
        {% endfor %}
    </tbody>
</table>
{% endblock %}


